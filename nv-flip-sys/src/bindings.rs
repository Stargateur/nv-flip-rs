/* automatically generated by rust-bindgen 0.65.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlipImageColor3 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlipImageFloat {
    _unused: [u8; 0],
}
extern "C" {
    pub fn flip_image_color3_new(width: u32, height: u32, data: *const u8) -> *mut FlipImageColor3;
}
extern "C" {
    pub fn flip_image_color3_clone(image: *mut FlipImageColor3) -> *mut FlipImageColor3;
}
extern "C" {
    pub fn flip_image_color3_get_data(image: *const FlipImageColor3, data: *mut u8);
}
extern "C" {
    pub fn flip_image_color3_free(image: *mut FlipImageColor3);
}
extern "C" {
    pub fn flip_image_color3_magma_map() -> *mut FlipImageColor3;
}
extern "C" {
    pub fn flip_image_color3_color_map(
        output: *mut FlipImageColor3,
        error_map: *mut FlipImageFloat,
        value_mapping: *mut FlipImageColor3,
    );
}
extern "C" {
    pub fn flip_image_float_new(width: u32, height: u32, data: *const f32) -> *mut FlipImageFloat;
}
extern "C" {
    pub fn flip_image_float_clone(image: *mut FlipImageFloat) -> *mut FlipImageFloat;
}
extern "C" {
    pub fn flip_image_float_get_data(image: *const FlipImageFloat, data: *mut f32);
}
extern "C" {
    pub fn flip_image_float_free(image: *mut FlipImageFloat);
}
extern "C" {
    pub fn flip_image_float_flip(
        error_map: *mut FlipImageFloat,
        reference_image: *mut FlipImageColor3,
        test_image: *mut FlipImageColor3,
        pixels_per_degree: f32,
    );
}
extern "C" {
    pub fn flip_image_float_copy_float_to_color3(
        error_map: *mut FlipImageFloat,
        output: *mut FlipImageColor3,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlipImageHistogramRef {
    _unused: [u8; 0],
}
extern "C" {
    pub fn flip_image_histogram_ref_new(
        buckets: usize,
        min_value: f32,
        max_value: f32,
    ) -> *mut FlipImageHistogramRef;
}
extern "C" {
    pub fn flip_image_histogram_ref_get_bucket_size(
        histogram: *const FlipImageHistogramRef,
    ) -> usize;
}
extern "C" {
    pub fn flip_image_histogram_ref_get_bucket_id_min(
        histogram: *const FlipImageHistogramRef,
    ) -> usize;
}
extern "C" {
    pub fn flip_image_histogram_ref_get_bucket_id_max(
        histogram: *const FlipImageHistogramRef,
    ) -> usize;
}
extern "C" {
    pub fn flip_image_histogram_ref_get_bucket_value(
        histogram: *const FlipImageHistogramRef,
        bucket_id: usize,
    ) -> usize;
}
extern "C" {
    pub fn flip_image_histogram_ref_size(histogram: *const FlipImageHistogramRef) -> usize;
}
extern "C" {
    pub fn flip_image_histogram_ref_get_min_value(histogram: *const FlipImageHistogramRef) -> f32;
}
extern "C" {
    pub fn flip_image_histogram_ref_get_max_value(histogram: *const FlipImageHistogramRef) -> f32;
}
extern "C" {
    pub fn flip_image_histogram_ref_clear(histogram: *mut FlipImageHistogramRef);
}
extern "C" {
    pub fn flip_image_histogram_ref_resize(histogram: *mut FlipImageHistogramRef, buckets: usize);
}
extern "C" {
    pub fn flip_image_histogram_ref_value_bucket_id(
        histogram: *mut FlipImageHistogramRef,
        buckets: f32,
    ) -> usize;
}
extern "C" {
    pub fn flip_image_histogram_ref_inc_value(
        histogram: *mut FlipImageHistogramRef,
        value: f32,
        count: usize,
    );
}
extern "C" {
    pub fn flip_image_histogram_ref_inc_image(
        histogram: *mut FlipImageHistogramRef,
        image: *const FlipImageFloat,
    );
}
extern "C" {
    pub fn flip_image_histogram_ref_free(histogram: *mut FlipImageHistogramRef);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FlipImagePool {
    _unused: [u8; 0],
}
extern "C" {
    pub fn flip_image_pool_new(buckets: usize) -> *mut FlipImagePool;
}
extern "C" {
    pub fn flip_image_pool_get_histogram(pool: *mut FlipImagePool) -> *mut FlipImageHistogramRef;
}
extern "C" {
    pub fn flip_image_pool_get_min_value(pool: *const FlipImagePool) -> f32;
}
extern "C" {
    pub fn flip_image_pool_get_max_value(pool: *const FlipImagePool) -> f32;
}
extern "C" {
    pub fn flip_image_pool_get_mean(pool: *const FlipImagePool) -> f32;
}
extern "C" {
    pub fn flip_image_pool_get_weighted_percentile(
        pool: *const FlipImagePool,
        percentile: f64,
    ) -> f64;
}
extern "C" {
    pub fn flip_image_pool_get_percentile(
        pool: *mut FlipImagePool,
        percentile: f32,
        weighted: bool,
    ) -> f32;
}
extern "C" {
    pub fn flip_image_pool_update_image(pool: *mut FlipImagePool, image: *const FlipImageFloat);
}
extern "C" {
    pub fn flip_image_pool_clear(pool: *mut FlipImagePool);
}
extern "C" {
    pub fn flip_image_pool_free(pool: *mut FlipImagePool);
}
